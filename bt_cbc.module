<?php

/**
 * @file
 * BT_CBC module file.
 */

include 'inc/block-styles-form--blocks-forms.inc';
include 'inc/block-styles-form--utils.inc';
include 'inc/block-styles-form--elements-builders.inc';
include 'inc/block-styles-form--styles-builders.inc';
include 'inc/block-styles-form--elements-submits.inc';

/**
 * @file
 * A description of what your module does.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\block\Entity\Block;

/**
 * Implements hook_form_FORM_ID_form_alter().
 */
function bt_cbc_form_block_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Block styles form.
  $form['actions']['#weight'] = '200';
  $form['advanced']['#weight'] = '150';
  $form['third_party_settings']['#tree'] = TRUE;
  $form['third_party_settings']['#weight'] = '100';
  $form['third_party_settings']['bt_cbc'] = _block_styles_form_base_builder();

  $form_object = $form_state->getFormObject();
  if ($form_object instanceof EntityFormInterface) {
    /** @var \Drupal\block\BlockInterface $block */
    $block = $form_object->getEntity();

    // Background.
    $default_value = $block->getThirdPartySetting('bt_cbc', 'background');
    $form['third_party_settings']['bt_cbc']['background']['color_select']['#default_value'] = $default_value ? $default_value['color_select'] : '';
    $form['third_party_settings']['bt_cbc']['background']['color_custom']['#default_value'] = $default_value ? $default_value['color_custom'] : '';

    // Animation.
    $default_value = $block->getThirdPartySetting('bt_cbc', 'animation');
    $form['third_party_settings']['bt_cbc']['animation']['option']['#default_value'] = $default_value ? $default_value['option'] : '';
    $form['third_party_settings']['bt_cbc']['animation']['trigger']['#default_value'] = $default_value ? $default_value['trigger'] : '';
    $form['third_party_settings']['bt_cbc']['animation']['type']['#default_value'] = $default_value ? $default_value['type'] : '';
    $form['third_party_settings']['bt_cbc']['animation']['duration']['#default_value'] = $default_value ? $default_value['duration'] : '';
    $form['third_party_settings']['bt_cbc']['animation']['count']['#default_value'] = $default_value ? $default_value['count'] : '';
    $form['third_party_settings']['bt_cbc']['animation']['delay']['#default_value'] = $default_value ? $default_value['delay'] : '';
    $form['third_party_settings']['bt_cbc']['animation']['function']['#default_value'] = $default_value ? $default_value['function'] : '';
    $form['third_party_settings']['bt_cbc']['animation']['fill']['#default_value'] = $default_value ? $default_value['fill'] : '';

    // Classes.
    $form['third_party_settings']['bt_cbc']['custom_classes'] = _custom_classes_form_element_builder();
    $form['third_party_settings']['bt_cbc']['custom_classes']['#default_value'] = $block->getThirdPartySetting('bt_cbc', 'custom_classes') ? $block->getThirdPartySetting('bt_cbc', 'custom_classes') : '';

    // Breakpoint styles.
    $screens = [
      'sm' => t('min-width: 576px'),
      'md' => t('min-width: 768px'),
      'lg' => t('min-width: 992px'),
      'xl' => t('min-width: 1200px'),
      'xxl' => t('min-width: 1400px'),
    ];

    $padding_default_values = $block->getThirdPartySetting('bt_cbc', 'padding');
    $block_align_default_value = $block->getThirdPartySetting('bt_cbc', 'block_align');
    $text_align_default_value = $block->getThirdPartySetting('bt_cbc', 'text_align');
    foreach ($screens as $prefix => $breakpoint) {
      // Padding.
      $form['third_party_settings']['bt_cbc']['padding'][$prefix] = _block_style_padding($breakpoint);
      $form['third_party_settings']['bt_cbc']['padding'][$prefix]['padding_left']['#default_value'] = $padding_default_values ? $padding_default_values[$prefix]['padding_left'] : 'default';
      $form['third_party_settings']['bt_cbc']['padding'][$prefix]['padding_top']['#default_value'] = $padding_default_values ? $padding_default_values[$prefix]['padding_top'] : 'default';
      $form['third_party_settings']['bt_cbc']['padding'][$prefix]['padding_right']['#default_value'] = $padding_default_values ? $padding_default_values[$prefix]['padding_right'] : 'default';
      $form['third_party_settings']['bt_cbc']['padding'][$prefix]['padding_bottom']['#default_value'] = $padding_default_values ? $padding_default_values[$prefix]['padding_bottom'] : 'default';

      // Block Align.
      $form['third_party_settings']['bt_cbc']['block_align'][$prefix] = _block_style_align($breakpoint);
      $form['third_party_settings']['bt_cbc']['block_align'][$prefix]['block_align']['#default_value'] = $block_align_default_value ? $block_align_default_value[$prefix]['block_align'] : 'default';

      // Text Align.
      $form['third_party_settings']['bt_cbc']['text_align'][$prefix] = _block_style_text_align($breakpoint);
      $form['third_party_settings']['bt_cbc']['text_align'][$prefix]['text_align']['#default_value'] = $text_align_default_value ? $text_align_default_value[$prefix]['text_align'] : 'default';
    }

    $block_type = $block->getPluginId();
    $custom_styled_blocks = _get_custom_styled_blocks();

    if (str_contains($block_type, 'inline_block')) {
      $block = $form['settings']['block_form']['#block'];
      $block_type = $block->bundle();
    }
    if (str_contains($block_type, 'system')) {
      $block_type = substr($block_type, 7);
      if (str_contains($block_type, 'menu_block:')) {
        $block_type = 'menu_block';
      }
    }
    if (in_array($block_type, $custom_styled_blocks)) {
      // Call to specific block function for form elements styles builder.
      $block_function = '_' . $block_type . '_style_block_layout_form_builder';
      if (function_exists($block_function)) {
        $elements = $block_function($block);
        $form['third_party_settings']['bt_cbc'] = array_merge($form['third_party_settings']['bt_cbc'], $elements);
      }
    }
  }
}

/**
 * Implements hook_form_layout_builder_configure_block_alter().
 */
function bt_cbc_form_layout_builder_configure_block_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Block styles form.
  $form['actions']['#weight'] = '200';
  $form['advanced']['#weight'] = '150';
  $form['third_party_settings']['#tree'] = TRUE;
  $form['third_party_settings']['bt_cbc'] = _block_styles_form_base_builder();
  $form['third_party_settings']['#weight'] = '100';

  /** @var \Drupal\layout_builder\SectionComponent $section_component */
  $section_component = $form_state->getFormObject()->getCurrentComponent();
  // We need to add the submit before save to ensure TPS to be saved.
  array_unshift($form['#submit'], 'bt_cbc_form_layout_builder_configure_block_submit');

  // Background.
  $form['third_party_settings']['bt_cbc']['background']['color_select']['#default_value'] = $section_component->getThirdPartySetting('bt_cbc', 'background_color_select');
  $form['third_party_settings']['bt_cbc']['background']['color_custom']['#default_value'] = $section_component->getThirdPartySetting('bt_cbc', 'background_color_custom');

  // Animation.
  $form['third_party_settings']['bt_cbc']['animation']['option']['#default_value'] = $section_component->getThirdPartySetting('bt_cbc', 'animation_option');
  $form['third_party_settings']['bt_cbc']['animation']['trigger']['#default_value'] = $section_component->getThirdPartySetting('bt_cbc', 'animation_trigger');
  $form['third_party_settings']['bt_cbc']['animation']['type']['#default_value'] = $section_component->getThirdPartySetting('bt_cbc', 'animation_type');
  $form['third_party_settings']['bt_cbc']['animation']['duration']['#default_value'] = $section_component->getThirdPartySetting('bt_cbc', 'animation_duration');
  $form['third_party_settings']['bt_cbc']['animation']['count']['#default_value'] = $section_component->getThirdPartySetting('bt_cbc', 'animation_count');
  $form['third_party_settings']['bt_cbc']['animation']['delay']['#default_value'] = $section_component->getThirdPartySetting('bt_cbc', 'animation_delay');
  $form['third_party_settings']['bt_cbc']['animation']['function']['#default_value'] = $section_component->getThirdPartySetting('bt_cbc', 'animation_function');
  $form['third_party_settings']['bt_cbc']['animation']['fill']['#default_value'] = $section_component->getThirdPartySetting('bt_cbc', 'animation_fill');

  // Classes.
  $form['third_party_settings']['bt_cbc']['custom_classes'] = _custom_classes_form_element_builder();
  $form['third_party_settings']['bt_cbc']['custom_classes']['#default_value'] = $section_component->getThirdPartySetting('bt_cbc', 'custom_classes');

  // Breakpoint styles.
  $screens = [
    'sm' => t('min-width: 576px'),
    'md' => t('min-width: 768px'),
    'lg' => t('min-width: 992px'),
    'xl' => t('min-width: 1200px'),
    'xxl' => t('min-width: 1400px'),
  ];

  foreach ($screens as $prefix => $breakpoint) {
    // Padding.
    $form['third_party_settings']['bt_cbc']['padding'][$prefix] = _block_style_padding($breakpoint);
    $form['third_party_settings']['bt_cbc']['padding'][$prefix]['padding_left']['#default_value'] = $section_component->getThirdPartySetting('bt_cbc', $prefix . '_padding_left');
    $form['third_party_settings']['bt_cbc']['padding'][$prefix]['padding_top']['#default_value'] = $section_component->getThirdPartySetting('bt_cbc', $prefix . '_padding_top');
    $form['third_party_settings']['bt_cbc']['padding'][$prefix]['padding_right']['#default_value'] = $section_component->getThirdPartySetting('bt_cbc', $prefix . '_padding_right');
    $form['third_party_settings']['bt_cbc']['padding'][$prefix]['padding_bottom']['#default_value'] = $section_component->getThirdPartySetting('bt_cbc', $prefix . '_padding_bottom');

    // Block Align.
    $form['third_party_settings']['bt_cbc']['block_align'][$prefix] = _block_style_align($breakpoint);
    $form['third_party_settings']['bt_cbc']['block_align'][$prefix]['block_align']['#default_value'] = $section_component->getThirdPartySetting('bt_cbc', $prefix . '_block_align');

    // Text Align.
    $form['third_party_settings']['bt_cbc']['text_align'][$prefix] = _block_style_text_align($breakpoint);
    $form['third_party_settings']['bt_cbc']['text_align'][$prefix]['text_align']['#default_value'] = $section_component->getThirdPartySetting('bt_cbc', $prefix . '_text_align');
  }

  $block_type = $section_component->getConfiguration()['id'];
  $custom_styled_blocks = _get_custom_styled_blocks();

  if (str_contains($block_type, 'inline_block')) {
    $block = $form['settings']['block_form']['#block'];
    $block_type = $block->bundle();
  }
  if (str_contains($block_type, 'system')) {
    $block_type = substr($block_type, 7);
    if (str_contains($block_type, 'menu_block:')) {
      $block_type = 'menu_block';
    }
  }
  if (in_array($block_type, $custom_styled_blocks)) {
    // Call to specific block function for form elements styles builder.
    $block_function = '_' . $block_type . '_style_layout_builder_form_builder';
    if (function_exists($block_function)) {
      $elements = $block_function($section_component);
      $form['third_party_settings']['bt_cbc'] = array_merge($form['third_party_settings']['bt_cbc'], $elements);
    }
  }
}

/**
 * Layout builder configure block submit.
 */
function bt_cbc_form_layout_builder_configure_block_submit($form, FormStateInterface $form_state) {
  /** @var \Drupal\layout_builder\SectionComponent $section_component */
  $section_component = $form_state->getFormObject()->getCurrentComponent();
  $block_type = $section_component->getConfiguration()['id'];
  $custom_styled_blocks = _get_custom_styled_blocks();

  if (str_contains($block_type, 'inline_block')) {
    $block = $form['settings']['block_form']['#block'];
    $block_type = $block->bundle();
  }
  if (str_contains($block_type, 'system')) {
    $block_type = substr($block_type, 7);
    if (str_contains($block_type, 'menu_block:')) {
      $block_type = 'menu_block';
    }
  }

  if (in_array($block_type, $custom_styled_blocks)) {
    // Block form submit call.
    $block_submit_function = '_' . $block_type . '_style_layout_builder_form_submit';
    if (function_exists($block_submit_function)) {
      $block_submit_function($form_state, $section_component);
    }
  }

  // Background.
  $get_value = ['third_party_settings', 'bt_cbc', 'background', 'color_select'];
  _element_style_layout_builder_configure_block_submit($form_state, $section_component, 'background', $get_value);

  $get_value = ['third_party_settings', 'bt_cbc', 'background', 'color_custom'];
  _element_style_layout_builder_configure_block_submit($form_state, $section_component, 'background', $get_value);

  // Animation.
  $get_value = ['third_party_settings', 'bt_cbc', 'animation', 'option'];
  _element_style_layout_builder_configure_block_submit($form_state, $section_component, 'animation', $get_value);

  $get_value = ['third_party_settings', 'bt_cbc', 'animation', 'trigger'];
  _element_style_layout_builder_configure_block_submit($form_state, $section_component, 'animation', $get_value);

  $get_value = ['third_party_settings', 'bt_cbc', 'animation', 'type'];
  _element_style_layout_builder_configure_block_submit($form_state, $section_component, 'animation', $get_value);

  $get_value = ['third_party_settings', 'bt_cbc', 'animation', 'duration'];
  _element_style_layout_builder_configure_block_submit($form_state, $section_component, 'animation', $get_value);

  $get_value = ['third_party_settings', 'bt_cbc', 'animation', 'delay'];
  _element_style_layout_builder_configure_block_submit($form_state, $section_component, 'animation', $get_value);

  $get_value = ['third_party_settings', 'bt_cbc', 'animation', 'count'];
  _element_style_layout_builder_configure_block_submit($form_state, $section_component, 'animation', $get_value);

  $get_value = ['third_party_settings', 'bt_cbc', 'animation', 'function'];
  _element_style_layout_builder_configure_block_submit($form_state, $section_component, 'animation', $get_value);

  $get_value = ['third_party_settings', 'bt_cbc', 'animation', 'fill'];
  _element_style_layout_builder_configure_block_submit($form_state, $section_component, 'animation', $get_value);

  // Classes.
  if ($classes = $form_state->getValue([
    'third_party_settings',
    'bt_cbc',
    'custom_classes',
  ])) {
    $section_component->setThirdPartySetting('bt_cbc', 'custom_classes', $classes);
  }
  else {
    $section_component->unsetThirdPartySetting('bt_cbc', 'custom_classes');
  }

  foreach (['sm', 'md', 'lg', 'xl', 'xxl'] as $prefix) {
    // Padding.
    $get_value = [
      'third_party_settings',
      'bt_cbc',
      'padding',
      $prefix,
      'padding_left',
    ];
    _element_style_layout_builder_configure_block_submit($form_state, $section_component, $prefix, $get_value);
    $get_value = [
      'third_party_settings',
      'bt_cbc',
      'padding',
      $prefix,
      'padding_top',
    ];
    _element_style_layout_builder_configure_block_submit($form_state, $section_component, $prefix, $get_value);
    $get_value = [
      'third_party_settings',
      'bt_cbc',
      'padding',
      $prefix,
      'padding_right',
    ];
    _element_style_layout_builder_configure_block_submit($form_state, $section_component, $prefix, $get_value);
    $get_value = [
      'third_party_settings',
      'bt_cbc',
      'padding',
      $prefix,
      'padding_bottom',
    ];
    _element_style_layout_builder_configure_block_submit($form_state, $section_component, $prefix, $get_value);

    // Text Align.
    $get_value = [
      'third_party_settings',
      'bt_cbc',
      'text_align',
      $prefix,
      'text_align',
    ];
    _element_style_layout_builder_configure_block_submit($form_state, $section_component, $prefix, $get_value);

    // Block Align.
    $get_value = [
      'third_party_settings',
      'bt_cbc',
      'block_align',
      $prefix,
      'block_align',
    ];
    _element_style_layout_builder_configure_block_submit($form_state, $section_component, $prefix, $get_value);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function bt_cbc_preprocess_layout(&$variables) {
  $layout = $variables['layout'] ?? NULL;
  $layout_id = $layout->get('id');
  if ($regions = $layout->getRegionNames()) {
    foreach ($regions as $region_name) {
      if (isset($variables['content'][$region_name])) {
        bt_cbc_block_style_layout_builder_add_styles($variables, $region_name, $layout_id);
      }
    }
  }
}

/**
 * Helper function for adding block styles via layout builder.
 */
function bt_cbc_block_style_layout_builder_add_styles(&$variables, $region_name) {
  $keys = \Drupal::routeMatch()->getParameters()->keys();
  foreach ($keys as $entity_name) {
    if ($entity_name == 'section_storage') {
      $sections = \Drupal::routeMatch()->getParameters()->get('section_storage')->getSections();
    }

    if (in_array($entity_name, ['node', 'commerce_product', 'taxonomy_term'])) {
      $entity = \Drupal::routeMatch()->getParameters()->get($entity_name);
      if ($entity && $entity->hasField('layout_builder__layout')) {
        /** @var \Drupal\layout_builder\Field\LayoutSectionItemList $layout */
        $layout = $entity->get('layout_builder__layout');
        $sections = $layout->getSections();
      }
    }
  }

  if ($sections) {
    foreach ($sections as $section) {
      if ($layout_id == $section->getLayoutId()) {
        $components = $section->getComponents();
        break;
      }
    }
    foreach ($variables['content'][$region_name] as $component_id => &$section_component) {
      if ($component_id != '#attributes' && array_key_exists($component_id, $components)) {
        $component = $components[$component_id];
        $settings = $component->getThirdPartySettings('bt_cbc');
        $section_component['#configuration']['block_style'] = $settings;

        if (isset($settings['custom_classes'])) {
          $classes = explode(' ', $settings['custom_classes']);
          $existing_classes = $section_component['#attributes']['class'] ?? [];
          $section_component['#attributes']['class'] = array_merge($existing_classes, $classes);
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function bt_cbc_preprocess_block(&$variables) {
  // Blocks coming from page manager widget does not have id.
  if (!empty($variables['elements']['#id'])) {
    $block = Block::load($variables['elements']['#id']);

    // Animation.
    if ($block && $settings = $block->getThirdPartySetting('bt_cbc', 'animation')) {
      foreach ($settings as $setting => $value) {
        $variables['configuration']['block_style']['animation_' . $setting] = $value;
      }
    }
    // Background.
    if ($block && $settings = $block->getThirdPartySetting('bt_cbc', 'background')) {
      foreach ($settings as $setting => $value) {
        $variables['configuration']['block_style']['background_' . $setting] = $value;
      }
    }
    // Padding.
    if ($block && $settings = $block->getThirdPartySetting('bt_cbc', 'padding')) {
      foreach ($settings as $prefix => $settings) {
        foreach ($settings as $setting => $value) {
          $variables['configuration']['block_style'][$prefix . '_' . $setting] = $value;
        }
      }
    }
    // Block Align.
    if ($block && $settings = $block->getThirdPartySetting('bt_cbc', 'block_align')) {
      foreach ($settings as $prefix => $settings) {
        foreach ($settings as $setting => $value) {
          $variables['configuration']['block_style'][$prefix . '_' . $setting] = $value;
        }
      }
    }
    // Text Align.
    if ($block && $settings = $block->getThirdPartySetting('bt_cbc', 'text_align')) {
      foreach ($settings as $prefix => $settings) {
        foreach ($settings as $setting => $value) {
          $variables['configuration']['block_style'][$prefix . '_' . $setting] = $value;
        }
      }
    }

    $block_type = $block->getPluginId();
    if (str_contains($block_type, 'block_content')) {
      $block_entity = \Drupal::service('entity.repository')->loadEntityByUuid('block_content', substr($block->getPluginId(), 14));
      if ($block_entity) {
        $block_type = $block_entity->bundle();
      }
    }
    if (str_contains($block->getPluginId(), 'system')) {
      $block_type = substr($block->getPluginId(), 7);
      if (str_contains($block_type, 'menu_block:')) {
        $block_type = 'menu_block';
      }
    }
    $custom_styled_blocks = _get_custom_styled_blocks();
    if (in_array($block_type, $custom_styled_blocks)) {
      // Call to specific block function for form elements styles builder.
      $block_function = '_' . $block_type . '_styles_block_preprocess';
      if (function_exists($block_function)) {
        $block_function($block, $variables);
      }
    }
  }
}
