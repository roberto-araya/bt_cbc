<?php

/**
 * @file
 * A description of what your module does.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_layout_builder_configure_block_alter().
 */
function bt_cbc_form_layout_builder_configure_block_alter(&$form, FormStateInterface $form_state, $form_id) {
  $block_content = [
    'bt_cb_cta' => [
      'title',
      'caption',
      'text',
      'button',
      'button_link',
      'button_secondary',
      'button_secondary_link',
    ],
    'bt_cb_hero' => [
      'title',
      'caption',
      'text',
      'text_background',
      'button',
      'button_link',
      'button_secondary',
      'button_secondary_link',
    ],
    'bt_cb_highlighted_text_image' => [
      'title',
      'caption',
      'text',
      'highlighted',
    ],
    'bt_cb_text_icon' => [
      'title',
      'caption',
      'text',
      'icon',
      'button',
      'button_link',
    ],
    'bt_cb_text_image' => [
      'title',
      'caption',
      'text',
      'button',
      'button_link',
    ],
    'bt_cb_quote' => [
      'text',
      'source',
      'link',
      'symbol',
    ],
    'bt_cb_section_title' => [
      'title',
      'caption',
      'text',
    ],
    'bt_cb_text' => [
      'title',
      'caption',
      'text',
      'button',
      'button_link',
    ],
    'bt_cb_title_icon' => [
      'title',
      'caption',
      'icon',
    ],
    'bt_cb_title_image' => [
      'title',
      'caption',
    ],
    'bt_cb_testimonial' => [
      'title',
      'text',
    ],
    'bt_cb_highlighted_text' => ['highlighted'],
  ];

  $other_block_content = [
    'bt_image',
    'bt_image_link',
    'bt_cb_map',
    'bt_images_gallery',
    'bt_images_slide',
  ];

  if (array_key_exists('block_form', $form['settings'])) {
    $block_content_bundle = $form['settings']['block_form']['#block']->bundle();

    if (array_key_exists($block_content_bundle, $block_content) || in_array($block_content_bundle, $other_block_content)) {
      /** @var \Drupal\layout_builder\SectionComponent $section_component */
      $section_component = $form_state->getFormObject()->getCurrentComponent();
      // We need to add the submit before save to ensure TPS to be saved.
      array_unshift($form['#submit'], 'bt_cbc_form_layout_builder_configure_block_submit');

      $form['settings']['block_style'] = [
        '#type' => 'fieldgroup',
        '#title' => t('Style'),
        '#description' => t('Styles that can be applied to the block presentation.'),
        '#tree' => TRUE,
      ];

      // Fonts.
      foreach (['title', 'caption', 'text'] as $title_option) {
        if (array_key_exists($title_option, $block_content[$block_content_bundle])) {
          $form['settings']['block_style'][$title_option . '_font_select'] = [
            '#type' => 'select',
            '#options' => bt_cbc_get_font_options(),
            '#title' => t('Default font'),
            '#description' => t("Select a default font. See https://fonts.google.com/."),
            '#default_value' => $section_component->getThirdPartySetting('block_style', $title_option. '_font_select'),
          ];
        }
      }

      // Background.
      $form['settings']['block_style']['background_color'] = [
        '#type' => 'details',
        '#title' => t("Background color"),
        '#tree' => TRUE,
      ];

      $form['settings']['block_style']['background_color']['background_color_select'] = [
        '#type' => 'select',
        '#options' => bt_cbc_get_theme_color_options(),
        '#title' => t('Theme Color'),
        '#description' => t("Select a theme color as background."),
        '#default_value' => $section_component->getThirdPartySetting('block_style', 'background_color_select'),
      ];

      $form['settings']['block_style']['background_color']['background_color_custom'] = [
        '#type' => 'color',
        '#title' => t('Custom color'),
        '#description' => t("Select a custom color as background."),
        '#default_value' => $section_component->getThirdPartySetting('block_style', 'background_color_custom'),
        '#states' => [
          'visible' => [
            ':input[name="settings[block_style][background_color][background_color_select]"]' => ['value' => 'customColor'],
          ],
        ],
      ];

      // Add specific color settings configurations.
      if (!in_array($block_content_bundle, $other_block_content)) {
        foreach ($block_content[$block_content_bundle] as $setting) {
          $form = bt_cbc_get_color_form_settings($form, $section_component, $setting);
        }
      }

      // Animation.
      $form['settings']['block_style']['animation'] = [
        '#type' => 'details',
        '#title' => t("Animation"),
        '#tree' => TRUE,
      ];

      $form['settings']['block_style']['animation']['animation_option'] = [
        '#type' => 'checkbox',
        '#title' => t("Add animation"),
        '#default_value' => $section_component->getThirdPartySetting('block_style', 'animation_option'),
      ];

      // When the animation start.
      $form['settings']['block_style']['animation']['animation_trigger'] = [
        '#type' => 'select',
        '#options' => [
          'on_page_load' => t("On page load"),
          'on_scroll' => t("On scroll"),
        ],
        '#title' => t('Trigger'),
        '#description' => t("Select when trigger animation."),
        '#default_value' => $section_component->getThirdPartySetting('block_style', 'animation_trigger'),
        '#states' => [
          'visible' => [
            ':input[name="settings[block_style][animation][animation_option]"]' => ['checked' => TRUE],
          ],
        ],
      ];

      // Type of animation.
      $form['settings']['block_style']['animation']['animation_type'] = [
        '#type' => 'select',
        '#options' => bt_cbc_get_animation_options(),
        '#title' => t('Type'),
        '#description' => t("Select a type of animation. Default: Fade In."),
        '#default_value' => $section_component->getThirdPartySetting('block_style', 'animation_type') ? $section_component->getThirdPartySetting('block_style', 'animation_type') : 'fadeIn',
        '#states' => [
          'visible' => [
            ':input[name="settings[block_style][animation][animation_option]"]' => ['checked' => TRUE],
          ],
        ],
      ];

      // Animation duration.
      $form['settings']['block_style']['animation']['animation_duration'] = [
        '#type' => 'textfield',
        '#title' => t("Duration"),
        '#description' => t("Enter the duration for the animation in seconds or miliseconds. Default (1s) for empty."),
        '#default_value' => $section_component->getThirdPartySetting('block_style', 'animation_duration'),
        '#attributes' => [
          'placeholder' => 'examples: 800ms,0.8s',
        ],
        '#states' => [
          'visible' => [
            ':input[name="settings[block_style][animation][animation_option]"]' => ['checked' => TRUE],
          ],
        ],
      ];

      // Animation count.
      $form['settings']['block_style']['animation']['animation_count'] = [
        '#type' => 'textfield',
        '#title' => t("Count"),
        '#description' => t("Enter the number of cycles for the animation. Default (1) for empty."),
        '#default_value' => $section_component->getThirdPartySetting('block_style', 'animation_count'),
        '#attributes' => [
          'placeholder' => 'examples: 1, 2, 5',
        ],
        '#states' => [
          'visible' => [
            ':input[name="settings[block_style][animation][animation_option]"]' => ['checked' => TRUE],
          ],
        ],
      ];

      // Animation delay.
      $form['settings']['block_style']['animation']['animation_delay'] = [
        '#type' => 'textfield',
        '#title' => t("Delay"),
        '#description' => t("Enter the delay for the animation in seconds or miliseconds. Default (0) for empty."),
        '#default_value' => $section_component->getThirdPartySetting('block_style', 'animation_delay'),
        '#attributes' => [
          'placeholder' => 'examples: 1s, 1000ms',
        ],
        '#states' => [
          'visible' => [
            ':input[name="settings[block_style][animation][animation_option]"]' => ['checked' => TRUE],
          ],
        ],
      ];

      // Animation function.
      $form['settings']['block_style']['animation']['animation_function'] = [
        '#type' => 'select',
        '#title' => t("Function"),
        '#options' => [
          'default' => t('Default'),
          'ease' => t('Ease'),
          'ease-in' => t('Ease In'),
          'ease-out' => t('Ease Out'),
          'ease-in-out' => t('Ease In Out'),
          'linear' => t('Linear'),
        ],
        '#description' => t("Select the transition timing function. Default: Ease."),
        '#default_value' => $section_component->getThirdPartySetting('block_style', 'animation_function'),
        '#states' => [
          'visible' => [
            ':input[name="settings[block_style][animation][animation_option]"]' => ['checked' => TRUE],
          ],
        ],
      ];

      // Animation fill mode.
      $form['settings']['block_style']['animation']['animation_fill'] = [
        '#type' => 'select',
        '#title' => t("Fill Mode"),
        '#options' => [
          'default' => t('Default'),
          'none' => t('None'),
          'forwards' => t('Forwards'),
          'backwards' => t('Backwards'),
          'both' => t('Both'),
          'initial' => t('Initial'),
          'inherit' => t('Inherit'),
        ],
        '#description' => t("Select the animation-fill-mode property. Default: Both."),
        '#default_value' => $section_component->getThirdPartySetting('block_style', 'animation_fill'),
        '#states' => [
          'visible' => [
            ':input[name="settings[block_style][animation][animation_option]"]' => ['checked' => TRUE],
          ],
        ],
      ];

      // Breakpoints form options.
      $screens = [
        'sm' => t('min-width: 576px'),
        'md' => t('min-width: 768px'),
        'lg' => t('min-width: 992px'),
        'xl' => t('min-width: 1200px'),
        'xxl' => t('min-width: 1400px'),
      ];

      $form['settings']['block_style']['padding'] = [
        '#type' => 'details',
        '#title' => t('Padding'),
        '#tree' => TRUE,
      ];

      foreach ($screens as $prefix => $breakpoint) {
        $form['settings']['block_style']['padding'][$prefix] = [
          '#type' => 'details',
          '#title' => $breakpoint,
          '#tree' => TRUE,
        ];

        $form['settings']['block_style']['padding'][$prefix]['padding_left'] = [
          '#type' => 'select',
          '#title' => t('Padding left'),
          '#options' => bt_cbc_get_size_options(),
          '#description' => t("Block's padding left"),
          '#default_value' => $section_component->getThirdPartySetting('block_style', $prefix . '_padding_left'),
        ];

        $form['settings']['block_style']['padding'][$prefix]['padding_top'] = [
          '#type' => 'select',
          '#title' => t('Padding top'),
          '#options' => bt_cbc_get_size_options(),
          '#description' => t("Block's padding top"),
          '#default_value' => $section_component->getThirdPartySetting('block_style', $prefix . '_padding_top'),
        ];

        $form['settings']['block_style']['padding'][$prefix]['padding_right'] = [
          '#type' => 'select',
          '#title' => t('Padding right'),
          '#options' => bt_cbc_get_size_options(),
          '#description' => t("Block's padding right"),
          '#default_value' => $section_component->getThirdPartySetting('block_style', $prefix . '_padding_right'),
        ];

        $form['settings']['block_style']['padding'][$prefix]['padding_bottom'] = [
          '#type' => 'select',
          '#title' => t('Padding bottom'),
          '#options' => bt_cbc_get_size_options(),
          '#description' => t("Block's padding bottom"),
          '#default_value' => $section_component->getThirdPartySetting('block_style', $prefix . '_padding_bottom'),
        ];
      }

      $form['settings']['block_style']['block_align'] = [
        '#type' => 'details',
        '#title' => t('Block Align'),
        '#tree' => TRUE,
      ];

      foreach ($screens as $prefix => $breakpoint) {
        $form['settings']['block_style']['block_align'][$prefix] = [
          '#type' => 'details',
          '#title' => $breakpoint,
          '#tree' => TRUE,
        ];

        $form['settings']['block_style']['block_align'][$prefix]['block_align'] = [
          '#type' => 'select',
          '#title' => t('Block align'),
          '#options' => [
            'default' => t('Default'),
            'stretch' => t('Stretch'),
            'start' => t('Start'),
            'center' => t('Center'),
            'end' => t('End'),
          ],
          '#description' => t("Block's align"),
          '#default_value' => $section_component->getThirdPartySetting('block_style', $prefix . '_block_align'),
        ];
      }

      $form['settings']['block_style']['text_align'] = [
        '#type' => 'select',
        '#title' => t('Text align'),
        '#options' => [
          'default' => t('Default'),
          'left' => t('Left'),
          'center' => t('Center'),
          'right' => t('Right'),
        ],
        '#description' => t("Block's text align"),
        '#default_value' => $section_component->getThirdPartySetting('block_style', 'text_align'),
      ];

      $form['settings']['block_style']['custom_classes'] = [
        '#type' => 'textfield',
        '#title' => t('CSS class(es)'),
        '#description' => t('Customize the styling of this block by adding CSS classes. Separate multiple classes by spaces.'),
        '#default_value' => $section_component->getThirdPartySetting('block_style', 'custom_classes'),
      ];
    }
  }
}

/**
 * Layout builder configure block submit.
 */
function bt_cbc_form_layout_builder_configure_block_submit($form, FormStateInterface $form_state) {
  /** @var \Drupal\layout_builder\SectionComponent $section_component */
  $section_component = $form_state->getFormObject()->getCurrentComponent();
  if ($classes = $form_state->getValue([
    'settings',
    'block_style',
    'custom_classes',
  ])) {
    $section_component->setThirdPartySetting('block_style', 'custom_classes', $classes);
  }
  else {
    $section_component->unsetThirdPartySetting('block_style', 'custom_classes');
  }

  $styles = [
    'background_color',
    'title_color',
    'caption_color',
    'icon_color',
    'highlighted_color',
    'source_color',
    'link_color',
    'symbol_color',
    'text_color',
    'text_background_color',
    'button_color',
    'button_link_color',
    'button_secondary_color',
    'button_secondary_link_color',
  ];

  foreach ($styles as $style) {
    if ($component_style = $form_state->getValue([
      'settings',
      'block_style',
      $style, $style . '_select',
    ])) {
      $section_component->setThirdPartySetting('block_style', $style . '_select', $component_style);
    }
    else {
      $section_component->unsetThirdPartySetting('block_style', $style . '_select');
    }

    if ($component_style = $form_state->getValue([
      'settings',
      'block_style',
      $style, $style . '_custom',
    ])) {
      $section_component->setThirdPartySetting('block_style', $style . '_custom', $component_style);
    }
    else {
      $section_component->unsetThirdPartySetting('block_style', $style . '_custom');
    }
  }

  foreach (['title_font', 'caption_font', 'text_font'] as $font_option) {
    if ($component_style = $form_state->getValue([
      'settings',
      'block_style',
      $font_option . '_select',
    ])) {
      $section_component->setThirdPartySetting('block_style', $font_option);
    }
    else {
      $section_component->unsetThirdPartySetting('block_style', $font_option);
    }
  }

  // Animation.
  foreach ([
    'option',
    'trigger',
    'type',
    'duration',
    'delay',
    'count',
    'function',
    'fill',
  ] as $option) {
    if ($component_style = $form_state->getValue([
      'settings',
      'block_style',
      'animation', 'animation_' . $option,
    ])) {
      $section_component->setThirdPartySetting('block_style', 'animation_' . $option, $component_style);
    }
    else {
      $section_component->unsetThirdPartySetting('block_style', 'animation_' . $option);
    }
  }

  // Text_align option.
  if ($component_style = $form_state->getValue([
    'settings',
    'block_style',
    'text_align',
  ]
  )) {
    $section_component->setThirdPartySetting('block_style', 'text_align', $component_style);
  }

  $screens = ['sm', 'md', 'lg', 'xl', 'xxl'];

  $padding_styles = [
    'padding_left',
    'padding_top',
    'padding_right',
    'padding_bottom',
  ];

  foreach ($screens as $screen) {
    foreach ($padding_styles as $style) {
      if ($component_style = $form_state->getValue([
        'settings',
        'block_style',
        'padding',
        $screen, $style,
      ])) {
        $section_component->setThirdPartySetting('block_style', $screen . '_' . $style, $component_style);
      }
      else {
        $section_component->unsetThirdPartySetting('block_style', $screen . '_' . $style);
      }
    }
    // block_align.
    if ($component_style = $form_state->getValue([
      'settings',
      'block_style',
      'block_align',
      $screen, 'block_align',
    ])) {
      $section_component->setThirdPartySetting('block_style', $screen . '_block_align', $component_style);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function bt_cbc_preprocess_layout(&$variables) {
  $layout = $variables['layout'] ?? NULL;
  if ($regions = $layout->getRegionNames()) {
    foreach ($regions as $region_name) {
      if (isset($variables['content'][$region_name])) {
        bt_cbc_block_style_layout_builder_add_styles($variables, $region_name);
      }
    }
  }
}

/**
 * Helper function for adding classes via layout builder.
 */
function bt_cbc_block_style_layout_builder_add_styles(&$variables, $region_name) {
  foreach ($variables['content'][$region_name] as &$section_component) {
    $section_component['#configuration']['block_style'] = [];
    if (is_array($section_component) && isset($section_component['#block_style']['block_custom_classes'])) {
      $classes = explode(' ', $section_component['#block_style']['block_custom_classes']);
      $existing_classes = $section_component['#attributes']['class'] ?? [];
      $section_component['#attributes']['class'] = array_merge($existing_classes, $classes);
    }

    $styles = [
      'background_color',
      'title_color',
      'caption_color',
      'icon_color',
      'highlighted_color',
      'source_color',
      'link_color',
      'symbol_color',
      'text_color',
      'text_background_color',
      'button_color',
      'button_link_color',
      'button_secondary_color',
      'button_secondary_link_color',
    ];

    foreach ($styles as $style) {
      if (is_array($section_component) && isset($section_component['#block_style'][$style . '_select'])) {
        $section_component['#configuration']['block_style'][$style . '_select'] = $section_component['#block_style'][$style . '_select'];
      }
      if (is_array($section_component) && isset($section_component['#block_style'][$style . '_custom'])) {
        $section_component['#configuration']['block_style'][$style . '_custom'] = $section_component['#block_style'][$style . '_custom'];
      }
    }

    // Font.
    foreach (['title_font', 'caption_font', 'text_font'] as $font_option) {
      if (is_array($section_component) && isset($section_component['#block_style'][$font_option . '_select'])) {
        $section_component['#configuration']['block_style'][$font_option . '_select'] = $section_component['#block_style'][$font_option . '_select'];
      }
    }

    // Animation.
    foreach ([
      'option',
      'trigger',
      'type',
      'duration',
      'delay',
      'count',
      'function',
      'fill',
    ] as $option) {
      if (is_array($section_component) && isset($section_component['#block_style']['animation_' . $option])) {
        $section_component['#configuration']['block_style']['animation_' . $option] = $section_component['#block_style']['animation_' . $option];
      }
    }

    // text_align.
    if (is_array($section_component) && isset($section_component['#block_style']['text_align'])) {
      $section_component['#configuration']['block_style']['text_align'] = $section_component['#block_style']['text_align'];
    }

    $screens = ['sm', 'md', 'lg', 'xl', 'xxl'];

    $padding_styles = [
      'padding_left',
      'padding_top',
      'padding_right',
      'padding_bottom',
    ];

    foreach ($screens as $screen) {
      foreach ($padding_styles as $style) {
        if (is_array($section_component) && isset($section_component['#block_style'][$screen . '_' . $style])) {
          $section_component['#configuration']['block_style'][$screen . '_' . $style] = $section_component['#block_style'][$screen . '_' . $style];
        }
      }
      if (is_array($section_component) && isset($section_component['#block_style'][$screen . '_block_align'])) {
        $section_component['#configuration']['block_style'][$screen . '_block_align'] = $section_component['#block_style'][$screen . '_block_align'];
      }
    }
  }
}

/**
 * Return an array of sizes to apply in block styles form.
 */
function bt_cbc_get_size_options() :array {
  return [
    'default' => t('Default'),
    'none' => t('None'),
    '0.5rem' => t('Half'),
    '1rem' => t('Normal'),
    '2rem' => t('Double'),
    '3rem' => t('Triple'),
  ];
}

/**
 * Return an array of theme's color name.
 */
function bt_cbc_get_theme_color_options() :array {
  return [
    'default' => t('Default'),
    'bs-primary' => t('Primary'),
    'bs-primary-050' => t('Primary 50'),
    'bs-primary-100' => t('Primary 100'),
    'bs-primary-200' => t('Primary 200'),
    'bs-primary-300' => t('Primary 300'),
    'bs-primary-400' => t('Primary 400'),
    'bs-primary-500' => t('Primary 500'),
    'bs-primary-600' => t('Primary 600'),
    'bs-primary-700' => t('Primary 700'),
    'bs-primary-800' => t('Primary 800'),
    'bs-primary-900' => t('Primary 900'),
    'bs-secondary' => t('Secondary'),
    'bs-secondary-050' => t('Secondary 50'),
    'bs-secondary-100' => t('Secondary 100'),
    'bs-secondary-200' => t('Secondary 200'),
    'bs-secondary-300' => t('Secondary 300'),
    'bs-secondary-400' => t('Secondary 400'),
    'bs-secondary-500' => t('Secondary 500'),
    'bs-secondary-600' => t('Secondary 600'),
    'bs-secondary-700' => t('Secondary 700'),
    'bs-secondary-800' => t('Secondary 800'),
    'bs-secondary-900' => t('Secondary 900'),
    'bs-accent' => t('Accent'),
    'bs-accent-050' => t('Accent 50'),
    'bs-accent-100' => t('Accent 100'),
    'bs-accent-200' => t('Accent 200'),
    'bs-accent-300' => t('Accent 300'),
    'bs-accent-400' => t('Accent 400'),
    'bs-accent-500' => t('Accent 500'),
    'bs-accent-600' => t('Accent 600'),
    'bs-accent-700' => t('Accent 700'),
    'bs-accent-800' => t('Accent 800'),
    'bs-accent-900' => t('Accent 900'),
    'bs-success' => t('Success'),
    'bs-info' => t('Info'),
    'bs-warning' => t('Warning'),
    'bs-danger' => t('Danger'),
    'bs-light' => t('Light'),
    'bs-dark' => t('Dark'),
    'bs-blue' => t('Blue'),
    'bs-indigo' => t('Indigo'),
    'bs-purple' => t('Purple'),
    'bs-pink' => t('Pink'),
    'bs-red' => t('Red'),
    'bs-orange' => t('Orange'),
    'bs-yellow' => t('Yellow'),
    'bs-green' => t('Green'),
    'bs-teal' => t('Teal'),
    'bs-cyan' => t('Cyan'),
    'bs-white' => t('White'),
    'bs-gray-dark' => t('Gray Dark'),
    'bs-gray-100' => t('Gray 100'),
    'bs-gray-200' => t('Gray 200'),
    'bs-gray-300' => t('Gray 300'),
    'bs-gray-400' => t('Gray 400'),
    'bs-gray-500' => t('Gray 500'),
    'bs-gray-600' => t('Gray 600'),
    'bs-gray-700' => t('Gray 700'),
    'bs-gray-800' => t('Gray 800'),
    'bs-gray-900' => t('Gray 900'),
    'customColor' => t('Custom Color'),
  ];
}

/**
 * Return an form section for color element configurations.
 */
function bt_cbc_get_color_form_settings(&$form, $section_component, $setting) {
  $settings_texts = [
    'title' => [
      'title' => t('Title color'),
      'description' => t('Select a theme color for title.'),
    ],
    'caption' => [
      'title' => t('Caption color'),
      'description' => t('Select a theme color for caption.'),
    ],
    'text' => [
      'title' => t('Text color'),
      'description' => t('Select a theme color for text.'),
    ],
    'text_background' => [
      'title' => t('Text background color'),
      'description' => t('Select a theme color for text background.'),
    ],
    'icon' => [
      'title' => t('Icon color'),
      'description' => t('Select a theme color for icon.'),
    ],
    'highlighted' => [
      'title' => t('Highlighted color'),
      'description' => t('Select a theme color for the highlighted.'),
    ],
    'source' => [
      'title' => t('Source color'),
      'description' => t('Select a theme color for the source text.'),
    ],
    'link' => [
      'title' => t('Link color'),
      'description' => t('Select a theme color for the link.'),
    ],
    'symbol' => [
      'title' => t('Quote symbol color'),
      'description' => t('Select a theme color for the quote symbol.'),
    ],
    'button' => [
      'title' => t('Button color'),
      'description' => t('Select a theme color for button.'),
    ],
    'button_link' => [
      'title' => t('Button link color'),
      'description' => t('Select a theme color for link button.'),
    ],
    'button_secondary' => [
      'title' => t('Button secondary color'),
      'description' => t('Select a theme color for button.'),
    ],
    'button_secondary_link' => [
      'title' => t('Button secondary link color'),
      'description' => t('Select a theme color for button secondary link.'),
    ],
  ];

  $form['settings']['block_style'][$setting . '_color'] = [
    '#type' => 'details',
    '#title' => $settings_texts[$setting]['title'],
    '#tree' => TRUE,
  ];

  $form['settings']['block_style'][$setting . '_color'][$setting . '_color_select'] = [
    '#type' => 'select',
    '#options' => bt_cbc_get_theme_color_options(),
    '#title' => t('Theme Color'),
    '#description' => $settings_texts[$setting]['description'],
    '#default_value' => $section_component->getThirdPartySetting('block_style', $setting . '_color_select'),
  ];

  $form['settings']['block_style'][$setting . '_color'][$setting . '_color_custom'] = [
    '#type' => 'color',
    '#title' => $settings_texts[$setting]['title'],
    '#description' => t("Custom color"),
    '#default_value' => $section_component->getThirdPartySetting('block_style', $setting . '_color_custom'),
    '#states' => [
      'visible' => [
        ':input[name="settings[block_style][' . $setting . '_color][' . $setting . '_color_select]"]' => ['value' => 'customColor'],
      ],
    ],
  ];

  return $form;
}

/**
 * Return an animations select options.
 */
function bt_cbc_get_animation_options() {
  return [
    'bounce' => 'Bounce',
    'flash' => 'Flash',
    'jello' => 'Jello',
    'pulse' => 'Pulse',
    'rubberBand' => 'Rubber Band',
    'shake' => 'Shake',
    'swing' => 'Swing',
    'tada' => 'Tada',
    'wooble' => 'Wooble',
    'bounceIn' => 'Bounce In',
    'bounceInDown' => 'Bounce In Down',
    'bounceInLeft' => 'Bounce In Left',
    'bounceInRight' => 'Bounce In Right',
    'bounceInUp' => 'Bounce In UP',
    'bounceOut' => 'Bounce Out',
    'bounceOutDown' => 'Bounce Out Down',
    'bounceOutLeft' => 'Bounce Out Left',
    'bounceOutRight' => 'Bounce Out Right',
    'bounceOutUp' => 'Bounce Out UP',
    'fadeIn' => 'Fade In',
    'fadeInDown' => 'Fade In Down',
    'fadeInDownBig' => 'Fade In Down Big',
    'fadeInLeft' => 'Fade In Left',
    'fadeInLeftBig' => 'Fade In Left Big',
    'fadeInRight' => 'Fade In Right',
    'fadeInRightBig' => 'Fade In Right Big',
    'fadeInUp' => 'Fade In Up',
    'fadeInUpBig' => 'Fade In Up Big',
    'fadeOut' => 'Fade Out',
    'fadeOutDown' => 'Fade Out Down',
    'fadeOutDownBig' => 'Fade Out Down Big',
    'fadeOutLeft' => 'Fade Out Left',
    'fadeOutLeftBig' => 'Fade Out Left Big',
    'fadeOutRight' => 'Fade Out Right',
    'fadeOutRightBig' => 'Fade Out Right Big',
    'fadeOutUp' => 'Fade Out Up',
    'fadeOutUpBig' => 'Fade Out Up Big',
    'flip' => 'Flip',
    'flipInX' => 'Flip In X',
    'flipInY' => 'Flip In Y',
    'flipOutX' => 'Flip Out X',
    'flipOutY' => 'Flip Out Y',
    'lightSpeedIn' => 'Light Speed In',
    'lightSpeedOut' => 'Light Speed OUT',
    'rotateIn' => 'Rotate In',
    'rotateInDownLeft' => 'Rotate In Down Left',
    'rotateInDownRight' => 'Rotate In Down Right',
    'rotateInUpLeft' => 'Rotate In Up Left',
    'rotateInUpRight' => 'Rotate In Up Right',
    'rotateOut' => 'Rotate Out',
    'rotateOutDownLeft' => 'Rotate Out Down Left',
    'rotateOutDownRight' => 'Rotate Out Down Right',
    'rotateOutUpLeft' => 'Rotate Out Up Left',
    'rotateOutUpRight' => 'Rotate Out Up Right',
    'slideInDown' => 'Slide In Down',
    'slideInLeft' => 'Slide In Left',
    'slideInRight' => 'Slide In Right',
    'slideOutUp' => 'Slide Out Up',
    'slideOutDown' => 'Slide Out Down',
    'slideOutLeft' => 'Slide Out Left',
    'slideOutRight' => 'Slide Out Right',
    'slideOutUp' => 'Slide Out Up',
    'hinge' => 'Hinge',
    'rollIn' => 'Roll In',
    'rollOut' => 'Roll Out',
    'zoomIn' => 'Zoom In',
    'zoomInDown' => 'Zoom In Down',
    'zoomInLeft' => 'Zoom In Left',
    'zoomInRight' => 'Zoom In Right',
    'zoomInUp' => 'Zoom In Up',
    'zoomOut' => 'Zoom Out',
    'zoomOutDown' => 'Zoom Out Down',
    'zoomOutLeft' => 'Zoom Out Left',
    'zoomOutRight' => 'Zoom Out Right',
    'zoomOutUp' => 'Zoom Out Up',
  ];
}

/**
 * Return an font select options.
 */
function bt_cbc_get_font_options() {
  $options = [
    'default' => 'Default',
    'roboto' => 'Roboto',
    'jolly-lodger' => 'Jolly Lodger',
    'oswald' => 'Oswald',
    'zen-antique' => 'Zen Antique',
    'amatic-sc' => 'Amatic SC',
    'kalam' => 'Kalam',
    'russo-one' => 'Russo One',
    'archivo-black' => 'Archivo Black',
    'el-messiri' => 'El Messiri',
    'akaya-telivigala' => 'Akaya Telivigala',
    'baloo-2' => 'Baloo 2',
    'noticia-text' => 'Noticia Text',
    'kaushan-script' => 'Kaushan Script',
    'titan-one' => 'Titan One',
    'montserrat' => 'Montserrat',
    'ubuntu' => 'Ubuntu',
    'merriweather' => 'Merriweather',
    'playfair-display' => 'Playfair Display',
    'kanit' => 'Kanit',
    'lora' => 'Lora',
    'fira-sans' => 'Fira Sans',
    'quicksand' => 'Quicksand',
    'barlow' => 'Barlow',
    'titillium-web' => 'Titillium Web',
    'trispace' => 'Trispace',
    'josefin-sans' => 'Josefin Sans',
    'shalimar' => 'Shalimar',
    'anton' => 'Anton',
    'dancing-script' => 'Dancing Script',
    'secular-one' => 'Secular One',
    'lobster' => 'Lobster',
    'fjalla-one' => 'Fjalla One',
    'exo-2' => 'Exo 2',
    'caveat' => 'Caveat',
  ];

  return $options;
}